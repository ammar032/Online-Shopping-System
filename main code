#include<iostream>
#include<string>
#include<stdlib.h>
#include<fstream>
using namespace std;

//CONCEPTS USED:
// HIERARCHICAL INHERITENCE, protected and public access specifiers, Dynamic Classes and Struct
// SETTER / GETTER, ISTREAM / OSTREAM OPERATOR OVERLOADING, THIS POINTER, CALL BY VALUE / REFERENCE
// GETLINE, SWITCH/CASE, IF/ELSE, FILE-HANDLING (READING/WRITING)
// 
//TYPES OF FUNCTIONS USED: VOID,FRIEND, BOOL, PARAMATERIZED  

class Profile   //SETTER, ISTREAM / OSTREAM OPERATOR OVERLOADING, THIS POINTER, CALL BY VALUE / REFERENCE
{
protected:
    string name;
    int age;
    string username;
    string password;

public:

    string getName()
    {
        return name;
    }
    string getUsername()
    {
        return username;
    }
    string getPassword()
    {
        return password;
    }

    void registration(string name, int age, string username, string password)
    {
        this->age = age;
        this->name = name;
        this->username = username;
        this->password = password;
    }

    bool login(string loginUsername, string loginPassword)
    {
        if (loginUsername == username && loginPassword == password)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};

class Item
{
public:
    string name;
    double itemPrice;
    string itemDescription;
    string owner;

    void setItem(string name, double itemPrice, string itemDescription, string owner)
    {
        this->name = name;
        this->itemPrice = itemPrice;
        this->itemDescription = itemDescription;
        this->owner = owner;
    }

    friend ostream& operator<<(ostream& obj, Item item)
    {
        obj << "======================================" << endl;
        obj << "\t\tITEM DETAILS" << endl;
        obj << "======================================" << endl;
        obj << "Item name: " << item.name << endl;
        obj << "Item price: " << item.itemPrice << " Rs" << endl;
        obj << "Item Description: " << item.itemDescription << endl;
        obj << "======================================" << endl << endl;
        return obj;
    }

    friend istream& operator>>(istream& obj, Item& item)
    {
        cout << "======================================" << endl;
        cout << "\t\tADD ITEM" << endl;
        cout << "======================================" << endl;
        cout << "Enter name: "; obj >> item.name;
        cout << "Enter price: "; obj >> item.itemPrice;
        cin.ignore();
        cout << "Enter description: "; getline(obj, item.itemDescription);
        cout << "======================================" << endl << endl;
        return obj;
    }
};

class Admin : public Profile
{
public:
    friend istream& operator >>(istream& obj, Admin &a1)
    {
        cin.ignore();
        cout << "======================================" << endl;
        cout << "\t\tREGISTER" << endl;
        cout << "======================================" << endl;
        cout << "Enter name: "; getline(obj, a1.name);
        cout << "Enter age: "; obj >> a1.age;
        cout << "Enter username: "; obj >> a1.username;
        cout << "Enter password: "; obj >> a1.password;
        cout << "======================================" << endl << endl;

        return obj;
    }

    friend ostream& operator <<(ostream& obj, Admin a1)
    {
        obj << "======================================" << endl;
        obj << "\t\tPROFILE" << endl;
        obj << "======================================" << endl;
        obj << "Name: " << a1.name << endl;
        obj << "Age: " << a1.age << endl;
        obj << "Username: " << a1.username << endl;
        obj << "Password: " << a1.password << endl;
        obj << "======================================" << endl << endl;

        return obj;
    }
};

class ShopOwner : public Profile
{
public:
    friend istream& operator >>(istream& obj, ShopOwner &s1)
    {
        cin.ignore();
        cout << "======================================" << endl;
        cout << "\t\tREGISTER" << endl;
        cout << "======================================" << endl;
        cout << "Enter name: "; getline(obj, s1.name);
        cout << "Enter age: "; obj >> s1.age;
        cout << "Enter username: "; obj >> s1.username;
        cout << "Enter password: "; obj >> s1.password;
        cout << "======================================" << endl << endl;

        return obj;
    }

    friend ostream& operator <<(ostream& obj, ShopOwner s1)
    {
        obj << "======================================" << endl;
        obj << "\t\tPROFILE" << endl;
        obj << "======================================" << endl;
        obj << "Name: " << s1.name << endl;
        obj << "Age: " << s1.age << endl;
        obj << "Username: " << s1.username << endl;
        obj << "Password: " << s1.password << endl;
        obj << "======================================" << endl << endl;

        return obj;
    }
};

struct Cart
{
    string item;
    int price;
};

class Customer : public Profile
{
public:
    int total;
    Cart cart[5];
    string wishlist[5];

    friend istream& operator >>(istream& obj, Customer &c1)
    {
        cin.ignore();
        cout << "======================================" << endl;
        cout << "\t\tREGISTER" << endl;
        cout << "======================================" << endl;
        cout << "Enter name: "; getline(obj, c1.name);
        cout << "Enter age: "; obj >> c1.age;
        cout << "Enter username: "; obj >> c1.username;
        cout << "Enter password: "; obj >> c1.password;
        cout << "======================================" << endl << endl;

        return obj;
    }

    friend ostream& operator <<(ostream& obj, Customer c1)
    {
        obj << "======================================" << endl;
        obj << "\t\tPROFILE" << endl;
        obj << "======================================" << endl;
        obj << "Name: " << c1.name << endl;
        obj << "Age: " << c1.age << endl;
        obj << "Username: " << c1.username << endl;
        obj << "Password: " << c1.password << endl;
        obj << "======================================" << endl << endl;

        return obj;
    }
};

int main()
{
    Admin* admin = new Admin[5];
    ShopOwner* owner = new ShopOwner[5];
    Customer* customer = new Customer[5];
    Item* item = new Item[5];
    fstream wishlist;

    admin[0].registration("ammar", 20, "ammar1", "password1");
    owner[0].registration("hamza", 19, "hamza2", "password2");
    customer[0].registration("sajid", 19, "sajid3", "password3");

    item[0].setItem("Earphones", 500, "Best audio ever", owner[0].getName());
    item[1].setItem("Pishtol", 600, "For shooting", owner[0].getName());

    int numberOfAdmins = 1;
    int numberOfOwners = 1;
    int numberOfCustomers = 1;
    int numberOfItems = 2;
    int numberOfCartItems = 0;
    int numberOfWishlist = 0;

a:
    int option;
    cout << "======================================" << endl;
    cout << "\t\tMAIN MENU" << endl;
    cout << "======================================" << endl;
    cout << "1. Login" << endl;
    cout << "2. Create Account" << endl;
    cout << "3. Exit" << endl;
    cout << "======================================" << endl;
    cout << "OPTION: ";
    cin >> option;
    system("cls");

    string loginUsername;
    string loginPassword;
    int user;
    char status = '0';

    switch (option)
    {
    case 1:
        cin.ignore();

       /* int login;
        cout << "======================================" << endl;
        cout << "\t\tLOGIN MENU" << endl;
        cout << "======================================" << endl;
        cout << "1. Admin" << endl;
        cout << "2. Shop Owner" << endl;
        cout << "3. Customer" << endl;
        cout << "======================================" << endl;
        cout << "OPTION: ";
        cin >> login;

        if (login == 1)
        {
            loginUsername = admin[0].getUsername();
            loginPassword = admin[0].getPassword();
        }
        else if (login == 2)
        {
            loginUsername = owner[0].getUsername();
            loginPassword = owner[0].getPassword();
        }
        else if (login == 3)
        {
            loginUsername = customer[0].getUsername();
            loginPassword = customer[0].getPassword();
        }*/

        cout << "====================\n";
        cout << "Enter your username: ";
        cin >> loginUsername;

        cout << "Enter your password: ";
        cin >> loginPassword;
        cout << "====================\n";

        for (int i = 0; i < numberOfAdmins; i++)
        {
            if (admin[i].login(loginUsername, loginPassword))
            {
                status = 'A';
                user = i;
            }
        }

        for (int i = 0; i < numberOfOwners; i++)
        {
            if (owner[i].login(loginUsername, loginPassword))
            {
                status = 'O';
                user = i;
            }
        }

        for (int i = 0; i < numberOfCustomers; i++)
        {
            if (customer[i].login(loginUsername, loginPassword))
            {
                status = 'C';
                user = i;
            }
        }

        system("cls");
        cout << "You have successfully logged in\n";

        switch (status)
        {
        case 'A':
        c:
            int adminOption;
            cout << "======================================" << endl;
            cout << "\t\tADMIN MENU" << endl;
            cout << "======================================" << endl;
            cout << "1. View Profiles" << endl;
            cout << "2. Delete Profile" << endl;
            cout << "3. Back To Main Menu" << endl;
            cout << "======================================" << endl;
            cout << "OPTION: ";
            cin >> adminOption;
            switch (adminOption)
            {
            case 1:
                cout << "\n\tADMIN\n";
                for (int i = 0; i < numberOfAdmins; i++)
                {
                    cout << admin[i];
                }

                cout << "\tSHOP OWNERS\n";
                for (int i = 0; i < numberOfOwners; i++)
                {
                    cout << owner[i];
                }

                cout << "\tCUSTOMERS\n";
                for (int i = 0; i < numberOfCustomers; i++)
                {
                    cout << customer[i];
                }

                int goBack;
                cout << "Press 1 to go back: ";
                cin >> goBack;
                system("cls");
                goto c;

            case 2:
                system("cls");
                int option;
                cout << "Do you want to delete an owner or a customer:\n1. Owner\n2. Customer\nOPTION: ";
                cin >> option;
                if (option == 1)
                {
                    cout << "\tSHOP OWNERS\n";
                    for (int i = 0; i < numberOfOwners; i++)
                    {
                        cout << i << ". " << owner[i].getName() << endl;
                    }
                    int deletion;
                    cout << "Which account do you want to delete: ";
                    cin >> deletion;
                    owner[deletion].registration("REMOVED", 0, "REMOVED", "REMOVED");
                    system("cls");
                    cout << "Account successfully deleted!\n";
                    goto c;
                }
                else if (option == 2)
                {
                    cout << "\tCUSTOMERS\n";
                    for (int i = 0; i < numberOfCustomers; i++)
                    {
                        cout << i << ". " << customer[i].getName() << endl;
                    }
                    int deletion;
                    cout << "Which account do you want to delete: ";
                    cin >> deletion;
                    customer[deletion].registration("REMOVED", 0, "REMOVED", "REMOVED");
                    system("cls");
                    cout << "Account successfully deleted!\n";
                    goto c;
                }
                else
                {
                    system("cls");
                    cout << "Invalid option!\n";
                    goto c;
                }

            case 3:
                system("cls");
                goto a;

            default:
                system("cls");
                cout << "Invalid option\n";
                goto c;
            }

            break;

        case 'O':
        d:
            int ownerOption;
            cout << "======================================" << endl;
            cout << "\t\tSHOP OWNER MENU" << endl;
            cout << "======================================" << endl;
            cout << "1. Display Items" << endl;
            cout << "2. Add Item" << endl;
            cout << "3. Remove Item" << endl;
            cout << "4. Back To Main Menu" << endl;
            cout << "======================================" << endl;
            cout << "OPTION: ";
            cin >> ownerOption;

            switch (ownerOption)
            {
            case 1:
                cout << endl;
                for (int i = 0; i < numberOfItems; i++)
                {
                    if (item[i].owner == owner[user].getName())
                    {
                        cout << item[i];
                    }
                }

                int option;
                cout << "Press 1 to go back: "; cin >> option;
                system("cls");
                goto d;

            case 2:
                cin >> item[numberOfItems];
                item[numberOfItems].owner = owner[user].getName();
                numberOfItems++;

                system("cls");
                cout << "Item successfully added\n";
                goto d;

            case 3:
                for (int i = 0; i < numberOfItems; i++)
                {
                    if (item[i].owner == owner[user].getName())
                    {
                        cout << i << ". " << item[i].name << endl;
                    }
                }
                int itemNumber;
                cout << "Which item do you want to delete: ";
                cin >> itemNumber;

                item[itemNumber].setItem("REMOVED", 0, "REMOVED", owner[user].getName());

                system("cls");
                cout << "Item successfully removed\n";
                goto d;

            case 4:
                system("cls");
                goto a;

            default:
                system("cls");
                cout << "Invalid option\n";
                goto d;
            }

            break;

        case 'C':
        e:

            wishlist.open("Wishlist.txt", ios::in);

            if (wishlist.is_open())
            {
                string item1;
                while (wishlist >> item1)
                {
                    customer[user].wishlist[numberOfWishlist] = item1;
                    numberOfWishlist++;
                }
                wishlist.close();
            }

            int customerOption;
            cout << "======================================" << endl;
            cout << "\t\tCUSTOMER MENU" << endl;
            cout << "======================================" << endl;
            cout << "1. View Items" << endl;
            cout << "2. View Cart" << endl;
            cout << "3. View Wishlist" << endl;
            cout << "4. Back To Main Menu" << endl;
            cout << "======================================" << endl;
            cout << "OPTION: ";
            cin >> customerOption;

            switch (customerOption)
            {
            case 1:
                system("cls");
                for (int i = 0; i < numberOfItems; i++)
                {
                    cout << item[i];
                }

                int itemSelection;
                for (int i = 0; i < numberOfItems; i++)
                {
                    cout << i << ". " << item[i].name << endl;
                }
                cout << "\nSelect item: ";
                cin >> itemSelection;

                system("cls");
                cout << item[itemSelection];

                int option;
                cout << "======================================" << endl;
                cout << "\t\tITEM OPTIONS" << endl;
                cout << "======================================" << endl;
                cout << "What would you like to do?\n";
                cout << "1. Buy Item\n";
                cout << "2. Add to Cart\n";
                cout << "3. Add to Wishlist\n";
                cout << "4. Go Back\n";
                cout << "OPTION: ";
                cin >> option;

                switch (option)
                {
                case 1:
                    system("cls");
                    cout << "======================================" << endl;
                    cout << "Item: " << item[itemSelection].name << endl;
                    cout << "Price: " << item[itemSelection].itemPrice << " Rs" << endl;
                    cout << "======================================" << endl << endl;

                    int payment;
                    cout << "========================\n";
                    cout << "How would you like to pay?\n";
                    cout << "========================\n";
                    cout << "1. Cash\n";
                    cout << "2. Credit\n";
                    cout << "========================\n";
                    cout << "OPTION: ";
                    cin >> payment;

                    if (payment == 1)
                    {
                        system("cls");
                        cout << "======================\n";
                        cout << "\tRECEIPT\n";
                        cout << "======================\n";
                        cout << "Name [Quantity]\tPrice\n";
                        cout << item[itemSelection].name << " [1]\t" << item[itemSelection].itemPrice << "Rs" << endl; 
                        cout << "----------------------\n";
                        cout << "Total :\t\t$" << item[itemSelection].itemPrice << endl;
                        cout << "======================\n";
                        cout << "Thank You for your purchase!\n\n";
                        break;
                    }
                    else if (payment == 2)
                    {
                        system("cls");
                        cout << "======================\n";
                        cout << "\tRECEIPT\n";
                        cout << "======================\n";
                        cout << "Name [Quantity]\tPrice\n";
                        cout << item[itemSelection].name << " [1]\t" << item[itemSelection].itemPrice << "Rs" << endl;
                        cout << "----------------------\n";
                        cout << "Total :\t\t$" << item[itemSelection].itemPrice << endl;
                        cout << "======================\n";
                        cout << "Thank You for your purchase!\n\n";
                        break;
                    }
                    break;
                case 2:
                    customer[user].cart[numberOfCartItems].item = item[itemSelection].name;
                    customer[user].cart[numberOfCartItems].price = item[itemSelection].itemPrice;

                    system("cls");
                    cout << "======================================" << endl;
                    cout << "Item successfully added to cart.\n";
                    cout << "======================================" << endl;
                    numberOfCartItems++;
                    goto e;

                case 3:

                    customer[user].wishlist[numberOfWishlist] = item[itemSelection].name;
                    numberOfWishlist++;

                    wishlist.open("Wishlist.txt", ios::out);
                    if (wishlist.is_open())
                    {
                        for (int i = 0; i < numberOfWishlist; i++)
                        {
                            wishlist << customer[user].wishlist[i] << endl;
                        }
                        wishlist.close();

                        system("cls");
                        cout << "======================================" << endl;
                        cout << "Item Successfully added to wishlist!\n";
                        cout << "======================================" << endl;
                        goto e;
                    }

                case 4:
                    system("cls");
                    goto e;

                default:
                    cout << "Invalid choice";
                    break;
                }
                break;
            case 2:
                if (numberOfCartItems == 0)
                {
                    system("cls");
                    cout << "======================================" << endl;
                    cout << "        Your Cart is Empty!" << endl;
                    cout << "======================================" << endl;
                    goto e;
                }
                else
                {
                    system("cls");
                    cout << "======================================" << endl;
                    cout << "               CART" << endl;
                    cout << "======================================" << endl;
                    for (int i = 0; i < numberOfCartItems; i++)
                    {
                        cout << "Item: " << customer[user].cart[i].item << endl;
                        cout << "Price: " << customer[user].cart[i].price << " Rs" << endl;
                        cout << "--------------------------------------" << endl;
                    }


                    char option;
                    cout << "==========================\n";
                    cout << "\tCart Options:\n";
                    cout << "==========================\n";
                    cout << "1. Calculate Total Bill\n";
                    cout << "2. Proceed To Checkout\n";
                    cout << "==========================\n";
                    cout << "Option: ";
                    cin >> option;

                    if (option == '1')
                    {
                        customer[user].total = 0;
                        for (int i = 0; i < numberOfCartItems; i++)
                        {
                            customer[user].total += customer[user].cart[i].price;
                        }
                        cout << "\nYour total bill is: " << customer[user].total << " Rs"<<endl<<endl;
                        
                        char option;
                        cout << "1. Proceed To Checkout\n2. Go Back\nOption: ";
                        cin >> option;
                        
                        if (option == '1')
                        {
                            goto p;
                        }
                        else
                        {
                            system("cls");
                            goto e;
                        }
                    }
                    else if (option == '2')
                    {
                        customer[user].total = 0;
                        for (int i = 0; i < numberOfCartItems; i++)
                        {
                            customer[user].total += customer[user].cart[i].price;
                        }
                    p:
                        system("cls");
                        cout << "======================\n";
                        cout << "\tRECEIPT\n";
                        cout << "======================\n";
                        cout << "Name [Quantity]\tPrice\n";
                        for (int i = 0; i < numberOfCartItems; i++)
                        {
                            cout << customer[user].cart[i].item<<" [1]\t" << customer[user].cart[i].price << "Rs" << endl;
                        }
                        cout << "----------------------\n";
                        cout << "Total :\t\t\t$" << customer[user].total << endl;
                        cout << "======================\n";
                        cout << "\tThank You for your purchase!\n\n";
                        break;
                    }
                    else
                    {
                        system("cls");
                        cout << "Invalid option\n";
                        goto e;
                    }
                }

            case 3:

                system("cls");
                cout << "======================================" << endl;
                cout << "\t    WISHLIST ITEMS" << endl;
                cout << "======================================" << endl;

                if(numberOfWishlist>0)
                {
                    for (int i = 0; i < numberOfWishlist; i++)
                    {
                        cout << "\t- " << customer[user].wishlist[i] << endl;
                    }

                    cout << endl;
                    int goBack;
                    cout << "Press 1 to go back: ";
                    cin >> goBack;

                    system("cls");
                    goto e;
                }
                else
                {
                    system("cls");
                    cout << "======================================" << endl;
                    cout << "\t    WISHLIST IS EMPTY" << endl;
                    cout << "======================================" << endl;
                    goto e;
                }

            case 4:
                system("cls");
                goto a;

            default:
                system("cls");
                cout << "Invalid option\n";
                goto e;
            }

            break;

        default:
            system("cls");
            cout << "Invalid credentials please login again\n";
            goto a;
        }

        break;

    case 2:
    b:
        int option;
        cout << "======================================" << endl;
        cout << "\t\tACCOUNT CREATION" << endl;
        cout << "======================================" << endl;
        cout << "Do you want to make an account for: " << endl;
        cout << "1. Admin" << endl;
        cout << "2. Shop Owner" << endl;
        cout << "3. Customer" << endl;
        cout << "======================================" << endl;
        cout << "OPTION: ";
        cin >> option;
        switch (option)
        {
        case 1:
            cin >> admin[numberOfAdmins++];
            system("cls");
            cout << "Account successfully created now please login\n";
            goto a;

        case 2:
            cin >> owner[numberOfOwners++];
            system("cls");
            cout << "Account successfully created now please login\n";
            goto a;

        case 3:
            cin >> customer[numberOfCustomers++];
            system("cls");
            cout << "Account successfully created now please login\n";
            goto a;

        default:
            system("cls");
            cout << "Invalid option please select one of the options below\n";
            goto b;
        }

        break;

    case 3:
    z:
        delete[] admin;
        delete[] owner;
        delete[] customer;
        delete[] item;
        cout << "\nProgram Ended Successfully\n";
        break;

    default:
        system("cls");
        cout << "Invalid option\n";
        goto a;
    }
}
